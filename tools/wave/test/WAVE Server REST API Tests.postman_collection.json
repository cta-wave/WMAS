{
	"info": {
		"_postman_id": "7901c300-0e7a-4009-9af0-c2f47fa5b9f6",
		"name": "WAVE Server REST API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Read Available Tests",
			"item": [
				{
					"name": "Read Available Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c96a54c8-0f7a-4b48-ac1f-0fc4001b98b1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var availableTests = pm.response.json();",
									"",
									"pm.test(\"JSON structure is as expected\", function () {",
									"    pm.expect(typeof availableTests).to.equal(\"object\");",
									"    for (var api of Object.keys(availableTests)) {",
									"        pm.expect(availableTests[api]).to.be.an.instanceof(Array);",
									"        var apiRegExp = new RegExp(\"^/\" + api, \"i\");",
									"        for (var test of availableTests[api]) {",
									"            pm.expect(test).to.match(apiRegExp);",
									"        }",
									"    }",
									"});",
									"",
									"var includedTests = [];",
									"var excludedTests = [];",
									"var specialTimeoutTest = \"\";",
									"",
									"var apis = Object.keys(availableTests);",
									"for(var api of apis) {",
									"    if (availableTests[api].length > 50) {",
									"        var subDirs = availableTests[api].map(test => test.split(\"/\").filter(part => !!part).join(\"/\").split(\"/\")[1]).reduce((acc, curr) => acc.indexOf(curr) === -1 ? acc.concat([curr]) : acc, []);",
									"        if (subDirs.length > 2) {",
									"            includedTests.push(\"/\" + api);",
									"            excludedTests.push(\"/\" + api + \"/\" + subDirs[0]);",
									"            specialTimeoutTest = availableTests[api][availableTests[api].length - 1];",
									"            break;",
									"        }",
									"        ",
									"    }",
									"}",
									"",
									"pm.globals.set(\"available_tests\", availableTests);",
									"pm.globals.set(\"included_tests\", JSON.stringify(includedTests));",
									"pm.globals.set(\"excluded_tests\", JSON.stringify(excludedTests));",
									"pm.globals.set(\"special_timeout_test\", specialTimeoutTest.replace(\".\", \"\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create and Read Sessions",
			"item": [
				{
					"name": "With Defaults",
					"item": [
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6b545d7-6252-4609-b873-73be94532d87",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"tests\");",
											"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
											"    pm.expect(jsonData.tests).to.have.property(\"include\");",
											"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
											"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"types\");",
											"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"user_agent\");",
											"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"timeouts\");",
											"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
											"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
											"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
											"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
											"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"browser\");",
											"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
											"    pm.expect(jsonData.browser).to.have.property(\"name\");",
											"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
											"    pm.expect(jsonData.browser).to.have.property(\"version\");",
											"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
											"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"webhook_urls\");",
											"    pm.expect(jsonData.webhook_urls).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"labels\");",
											"    pm.expect(jsonData.labels).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"pm.test(\"Configuration is default\", function () {",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"    pm.expect(jsonData.tests.include).to.include(\"/\");",
											"    pm.expect(jsonData.types).to.include(\"automatic\");",
											"    pm.expect(jsonData.types).to.include(\"manual\");",
											"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
											"    pm.expect(jsonData.timeouts.automatic).to.equal(60000);",
											"    pm.expect(jsonData.timeouts.manual).to.equal(300000);",
											"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
											"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
											"    pm.expect(jsonData.is_public).to.equal(false);",
											"    pm.expect(jsonData.reference_tokens).to.be.empty;",
											"    pm.expect(jsonData.webhook_urls).to.be.empty;",
											"    pm.expect(jsonData.labels).to.be.empty;",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "910ea073-090a-4ee2-b5fc-386d9bfcbe6d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"labels\");",
											"    pm.expect(jsonData.labels).to.be.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData.date_started).to.satisfy(value => !value || typeof value === \"number\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"    pm.expect(jsonData.date_finished).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"pm.test(\"Session status is pending\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"pending\");",
											"})",
											"",
											"pm.test(\"Start and Finish date not set\", function () {",
											"    pm.expect(jsonData.date_started).to.be.null;",
											"    pm.expect(jsonData.date_finished).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5558f110-c1eb-46b0-8730-0ed580416666",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"pm.test(\"All tests are pending tests\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.not.have.lengthOf(0);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
											"})",
											"",
											"const availableTests = pm.globals.get(\"available_tests\"); ",
											"",
											"pm.test(\"All available tests are part of the session\", function () {",
											"    for (var api of Object.keys(jsonData.pending_tests)) {",
											"        for (var test of jsonData.pending_tests[api]) {",
											"            pm.expect(availableTests[api]).to.include(test);",
											"        }",
											"    }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d8432f6-27c3-45a0-8051-623a7e4475c0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ee0843fe-f3da-484e-b34b-030fa0386135",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "With Configuration",
					"item": [
						{
							"name": "Create Session \\w Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e5b17e0-0c3b-48ed-835d-906bee5dad19",
										"exec": [
											"var automaticTimeout = 120000;",
											"var manualTimeout = 1000000;",
											"var specialTimeout = 2000;",
											"",
											"pm.globals.set(\"automatic_timeout\", automaticTimeout);",
											"pm.globals.set(\"manual_timeout\", manualTimeout);",
											"pm.globals.set(\"special_timeout\", specialTimeout);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tests\": {\n        \"include\": {{included_tests}},\n        \"exclude\": {{excluded_tests}}\n    },\n    \"types\": [\n        \"automatic\"\n    ],\n    \"timeouts\": {\n        \"automatic\": {{automatic_timeout}},\n        \"manual\": {{manual_timeout}},\n        \"{{special_timeout_test}}\": {{special_timeout}}\n    },\n    \"labels\": [\"label1\", \"label2\"]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6b545d7-6252-4609-b873-73be94532d87",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"tests\");",
											"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
											"    pm.expect(jsonData.tests).to.have.property(\"include\");",
											"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
											"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"types\");",
											"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"user_agent\");",
											"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"timeouts\");",
											"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
											"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
											"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
											"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
											"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"browser\");",
											"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
											"    pm.expect(jsonData.browser).to.have.property(\"name\");",
											"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
											"    pm.expect(jsonData.browser).to.have.property(\"version\");",
											"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
											"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"webhook_urls\");",
											"    pm.expect(jsonData.webhook_urls).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"labels\");",
											"    pm.expect(jsonData.labels).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"var includedTests = JSON.parse(pm.globals.get(\"included_tests\"));",
											"var excludedTests = JSON.parse(pm.globals.get(\"excluded_tests\"));",
											"var automaticTimeout = pm.globals.get(\"automatic_timeout\");",
											"var manualTimeout = pm.globals.get(\"manual_timeout\");",
											"var specialTimeout = pm.globals.get(\"special_timeout\");",
											"var specialTimeoutTest = pm.globals.get(\"special_timeout_test\");",
											"",
											"pm.test(\"Configuration is as specified\", function () {",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"    for (var test of includedTests) {",
											"        pm.expect(jsonData.tests.include).to.include(test);",
											"    }",
											"    for (var test of excludedTests) {",
											"        pm.expect(jsonData.tests.exclude).to.include(test);",
											"    }",
											"    pm.expect(jsonData.types).to.include(\"automatic\");",
											"    pm.expect(jsonData.types).to.not.include(\"manual\");",
											"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
											"    pm.expect(jsonData.timeouts.automatic).to.equal(automaticTimeout);",
											"    pm.expect(jsonData.timeouts.manual).to.equal(manualTimeout);",
											"    pm.expect(jsonData.timeouts[specialTimeoutTest]).to.equal(specialTimeout);",
											"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
											"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
											"    pm.expect(jsonData.is_public).to.equal(false);",
											"    pm.expect(jsonData.reference_tokens).to.be.empty;",
											"    pm.expect(jsonData.webhook_urls).to.be.empty;",
											"    pm.expect(jsonData.labels).to.include(\"label1\");",
											"    pm.expect(jsonData.labels).to.include(\"label2\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5558f110-c1eb-46b0-8730-0ed580416666",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"pm.test(\"All tests are pending tests\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.not.have.lengthOf(0);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
											"})",
											"",
											"const availableTests = pm.globals.get(\"available_tests\");",
											"const includedTests = pm.globals.get(\"included_tests\");",
											"const excludedTests = pm.globals.get(\"excluded_tests\");",
											"",
											"pm.test(\"Selected subset of tests are part of the session\", function () {",
											"    for (var api of Object.keys(jsonData.pending_tests)) {",
											"        for (var includedTest of includedTests) {",
											"            if (includedTest.split(\"/\").find(part => !!part) === api) {",
											"                var includeRegExp = new RegExp(\"^\" + includedTest, \"i\");",
											"                for (var test of jsonData.pending_tests[api]) {",
											"                    pm.expect(test).to.match(regex);",
											"                }",
											"                break;",
											"            }",
											"        }",
											"        for (var excludedTest of excludedTests) {",
											"            if (excludedTest.split(\"/\").find(part => !!part) === api) {",
											"                var excludeRegExp = new RegExp(\"^\" + excludedTest, \"i\");",
											"                for (var test of jsonData.pending_tests[api]) {",
											"                    pm.expect(test).to.not.match(regex);",
											"                }",
											"                break;",
											"            }",
											"        }",
											"    }",
											"});",
											"",
											"const sessionTests = jsonData.pending_tests;",
											"",
											"pm.globals.set(\"session_tests\", JSON.stringify(sessionTests));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aef69109-daf0-4c50-87c1-ff68498a2ec2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"labels\");",
											"    pm.expect(jsonData.labels).to.be.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData.date_started).to.satisfy(value => !value || typeof value === \"number\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"    pm.expect(jsonData.date_finished).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"pm.test(\"Session status is pending\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"pending\");",
											"})",
											"",
											"pm.test(\"Start and Finish date not set\", function () {",
											"    pm.expect(jsonData.date_started).to.be.null;",
											"    pm.expect(jsonData.date_finished).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4de2ffb4-47f0-4b72-a92b-ff22b2624005",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8b8daf16-4137-4d2a-8e48-d32e7cd4e79e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "With Expiration",
					"item": [
						{
							"name": "Create Session With Expiration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40bfea04-ec49-4c29-8f01-6a367372083e",
										"exec": [
											"var expirationDate = Date.now() + 3000;",
											"pm.globals.set(\"expiration_date\", expirationDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"expiration_date\": {{expiration_date}}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Expired Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6b545d7-6252-4609-b873-73be94532d87",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b1e4a2d8-a9b6-4372-a3fd-68a3dfbd9aab",
										"exec": [
											"var expirationDate = pm.globals.get(\"expiration_date\");",
											"",
											"var timeout = expirationDate - Date.now() + 1000",
											"",
											"console.log(timeout)",
											"",
											"setTimeout(function () {}, timeout);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start expiring session remove expiration date",
					"item": [
						{
							"name": "Create Session With Expiration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40bfea04-ec49-4c29-8f01-6a367372083e",
										"exec": [
											"var expirationDate = Date.now() + 10000;",
											"pm.globals.set(\"expiration_date\", expirationDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"expiration_date\": {{expiration_date}}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6b545d7-6252-4609-b873-73be94532d87",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure contains expiration date\", function () {",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"var expirationDate = pm.globals.get(\"expiration_date\");",
											"",
											"pm.test(\"Expiration date is as specified\", function () {",
											"    pm.expect(jsonData.expiration_date).to.equal(expirationDate);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6b545d7-6252-4609-b873-73be94532d87",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure contains expiration date\", function () {",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"pm.test(\"Expiration date is null\", function () {",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Read Public Sessions",
			"item": [
				{
					"name": "Read Public Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0842e1a7-3c99-452c-8e1b-5e29460d3791",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON Array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an.instanceof(Array);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/public",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"public"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Find Session",
			"item": [
				{
					"name": "Create Session No Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
									"",
									"pm.test(\"Responds with token in JSON format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData.token).to.match(tokenRegex);",
									"});",
									"",
									"",
									"const response = pm.response.json();",
									"const token = response.token;",
									"pm.globals.set(\"session_token\", token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Session Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "82a90a31-2140-4dca-b22c-ac822c12a0a3",
								"exec": [
									"const token = pm.globals.get(\"session_token\");",
									"pm.globals.set(\"session_token_fragment\", token.split(\"-\").shift());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "061b15b2-a4e3-49b9-900a-894001792d8d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const sessionToken = pm.globals.get(\"session_token\");",
									"",
									"pm.test(\"Found token is original token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.equal(sessionToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token_fragment}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token_fragment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean Up",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Session Too Short Fragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "82a90a31-2140-4dca-b22c-ac822c12a0a3",
								"exec": [
									"const token = pm.globals.get(\"session_token\");",
									"pm.globals.set(\"session_token_fragment\", token.split(\"-\").shift());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "061b15b2-a4e3-49b9-900a-894001792d8d",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/1234567",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"1234567"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Read Next Test",
			"item": [
				{
					"name": "Clean Up",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Invalid Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Session \\w Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
								"exec": [
									"const response = pm.response.json();",
									"const token = response.token;",
									"pm.globals.set(\"session_token\", token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6e5b17e0-0c3b-48ed-835d-906bee5dad19",
								"exec": [
									"var automaticTimeout = 120000;",
									"var manualTimeout = 1000000;",
									"var specialTimeout = 2000;",
									"",
									"pm.globals.set(\"automatic_timeout\", automaticTimeout);",
									"pm.globals.set(\"manual_timeout\", manualTimeout);",
									"pm.globals.set(\"special_timeout\", specialTimeout);",
									"",
									"const availableTests = pm.globals.get(\"available_tests\");",
									"const test1 = availableTests[Object.keys(availableTests)[0]][0];",
									"",
									"pm.globals.set(\"single_test_1\", test1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tests\": {\n        \"include\": [\"{{single_test_1}}\"]\n    },\n    \"types\": [\n        \"automatic\"\n    ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Pending Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const nextTest = jsonData.next_test;",
									"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
									"",
									"pm.test(\"Returned test is new session page\", function () {",
									"    pm.expect(test).to.equal(\"/wave/newsession.html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Running Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const nextTest = jsonData.next_test;",
									"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
									"const api = test.split(\"/\").filter(part => !!part)[0]",
									"const availableTests = pm.globals.get(\"available_tests\")",
									"",
									"pm.test(\"Returned test is valid test\", function () {",
									"    pm.expect(availableTests).to.have.property(api);",
									"    pm.expect(availableTests[api]).to.contain(test)",
									"});",
									"",
									"",
									"setTimeout(function () {}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91dd9303-8cae-4aa7-ab22-a1892270e313",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"FAIL\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"results",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Completed Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const nextTest = jsonData.next_test;",
									"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
									"",
									"pm.test(\"Returned test is new session page\", function () {",
									"    pm.expect(test).to.equal(\"/wave/finish.html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean Up",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Session \\w Configuration Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
								"exec": [
									"const response = pm.response.json();",
									"const token = response.token;",
									"pm.globals.set(\"session_token\", token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6e5b17e0-0c3b-48ed-835d-906bee5dad19",
								"exec": [
									"var automaticTimeout = 120000;",
									"var manualTimeout = 1000000;",
									"var specialTimeout = 2000;",
									"",
									"pm.globals.set(\"automatic_timeout\", automaticTimeout);",
									"pm.globals.set(\"manual_timeout\", manualTimeout);",
									"pm.globals.set(\"special_timeout\", specialTimeout);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tests\": {\n        \"include\": {{included_tests}},\n        \"exclude\": {{excluded_tests}}\n    },\n    \"types\": [\n        \"automatic\"\n    ],\n    \"timeouts\": {\n        \"automatic\": 1000\n    },\n    \"labels\": [\"label1\", \"label2\"]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pause Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/pause",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}",
								"pause"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Aborted Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const nextTest = jsonData.next_test;",
									"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
									"",
									"pm.test(\"Returned test is new session page\", function () {",
									"    pm.expect(test).to.equal(\"/wave/pause.html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Stop Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/stop",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}",
								"stop"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Aborted Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const nextTest = jsonData.next_test;",
									"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
									"",
									"pm.test(\"Returned test is new session page\", function () {",
									"    pm.expect(test).to.equal(\"/wave/finish.html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean Up",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Control Session",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pause Pending Session",
					"item": [
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is pending\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"pending\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start Pending Session",
					"item": [
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Status is running\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"running\");",
											"});",
											"",
											"pm.test(\"Start date is set\", function () {",
											"    pm.expect(jsonData.date_started).to.be.below(Date.now());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start Running Session",
					"item": [
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is running\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"running\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pause Running Session",
					"item": [
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is paused\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"paused\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pause Paused Session",
					"item": [
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is paused\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"paused\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start Paused Session",
					"item": [
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is running\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"running\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stop Running Session",
					"item": [
						{
							"name": "Stop Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/stop",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Status is aborted\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});",
											"",
											"pm.test(\"Finish date is set\", function () {",
											"    pm.expect(jsonData.date_finished).to.be.below(Date.now());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stop Aborted Session",
					"item": [
						{
							"name": "Stop Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/stop",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is aborted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2d2677b-4c4a-4fa5-8234-a1264818520f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d40b473c-bd3d-4b30-9d07-8490c466eb87",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start Aborted Session",
					"item": [
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is aborted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2d2677b-4c4a-4fa5-8234-a1264818520f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d40b473c-bd3d-4b30-9d07-8490c466eb87",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pause Aborted Session",
					"item": [
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is aborted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2d2677b-4c4a-4fa5-8234-a1264818520f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d40b473c-bd3d-4b30-9d07-8490c466eb87",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup",
					"item": [
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ca7def71-38ee-41a0-865d-3d59923c592b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9258376d-620e-4e86-b43b-db98bacddf29",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stop Pending Session",
					"item": [
						{
							"name": "Stop Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/stop",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is aborted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup",
					"item": [
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ca7def71-38ee-41a0-865d-3d59923c592b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9258376d-620e-4e86-b43b-db98bacddf29",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stop Paused Session Copy",
					"item": [
						{
							"name": "Stop Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/stop",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is aborted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2d2677b-4c4a-4fa5-8234-a1264818520f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d40b473c-bd3d-4b30-9d07-8490c466eb87",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup",
					"item": [
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Session One Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e886f98-b49b-42bf-a60e-8621ff3ce71c",
										"exec": [
											"const availableTests = pm.globals.get(\"available_tests\");",
											"const test = availableTests[Object.keys(availableTests)[0]][0]",
											"",
											"pm.globals.set(\"single_test\", test);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tests\": {\n        \"include\": [\"{{single_test}}\"]\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Next Test of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
										"exec": [
											"const response = pm.response.json();",
											"const nextTest = response.next_test;",
											"pm.globals.set(\"current_test_url\", nextTest);",
											"if (!nextTest) return;",
											"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
											"pm.globals.set(\"current_test\", test);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}",
										"next"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Result",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"FAIL\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ca7def71-38ee-41a0-865d-3d59923c592b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9258376d-620e-4e86-b43b-db98bacddf29",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start Completed Session",
					"item": [
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"completed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pause Completed Session",
					"item": [
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"completed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stop Completed Session",
					"item": [
						{
							"name": "Stop Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/stop",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d1fdb3a-ca1a-44ff-8d94-e965ee443833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"completed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean Up",
					"item": [
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update and Read Sessions",
			"item": [
				{
					"name": "Create Default",
					"item": [
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6b545d7-6252-4609-b873-73be94532d87",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"tests\");",
											"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
											"    pm.expect(jsonData.tests).to.have.property(\"include\");",
											"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
											"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"types\");",
											"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"user_agent\");",
											"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"timeouts\");",
											"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
											"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
											"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
											"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
											"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"browser\");",
											"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
											"    pm.expect(jsonData.browser).to.have.property(\"name\");",
											"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
											"    pm.expect(jsonData.browser).to.have.property(\"version\");",
											"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
											"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"webhook_urls\");",
											"    pm.expect(jsonData.webhook_urls).to.be.an.instanceof(Array);",
											"});",
											"",
											"pm.test(\"Configuration is default\", function () {",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"    pm.expect(jsonData.tests.include).to.include(\"/\");",
											"    pm.expect(jsonData.types).to.include(\"automatic\");",
											"    pm.expect(jsonData.types).to.include(\"manual\");",
											"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
											"    pm.expect(jsonData.timeouts.automatic).to.equal(60000);",
											"    pm.expect(jsonData.timeouts.manual).to.equal(300000);",
											"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
											"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
											"    pm.expect(jsonData.is_public).to.equal(false);",
											"    pm.expect(jsonData.reference_tokens).to.be.empty;",
											"    pm.expect(jsonData.webhook_urls).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aef69109-daf0-4c50-87c1-ff68498a2ec2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"labels\");",
											"    pm.expect(jsonData.labels).to.be.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData.date_started).to.satisfy(value => !value || typeof value === \"number\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"    pm.expect(jsonData.date_finished).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"pm.test(\"Session status is pending\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"pending\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5558f110-c1eb-46b0-8730-0ed580416666",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"pm.test(\"All tests are pending tests\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.not.have.lengthOf(0);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
											"})",
											"",
											"const availableTests = pm.globals.get(\"available_tests\"); ",
											"",
											"pm.test(\"All available tests are part of the session\", function () {",
											"    for (var api of Object.keys(jsonData.pending_tests)) {",
											"        for (var test of jsonData.pending_tests[api]) {",
											"            pm.expect(availableTests[api]).to.include(test);",
											"        }",
											"    }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d8432f6-27c3-45a0-8051-623a7e4475c0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ee0843fe-f3da-484e-b34b-030fa0386135",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update With Configuration",
					"item": [
						{
							"name": "Update Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e5b17e0-0c3b-48ed-835d-906bee5dad19",
										"exec": [
											"var automaticTimeout = 120000;",
											"var manualTimeout = 1000000;",
											"var specialTimeout = 2000;",
											"",
											"pm.globals.set(\"automatic_timeout\", automaticTimeout);",
											"pm.globals.set(\"manual_timeout\", manualTimeout);",
											"pm.globals.set(\"special_timeout\", specialTimeout);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tests\": {\n        \"include\": {{included_tests}},\n        \"exclude\": {{excluded_tests}}\n    },\n    \"types\": [\n        \"automatic\"\n    ],\n    \"timeouts\": {\n        \"automatic\": {{automatic_timeout}},\n        \"manual\": {{manual_timeout}},\n        \"{{special_timeout_test}}\": {{special_timeout}}\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6b545d7-6252-4609-b873-73be94532d87",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"tests\");",
											"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
											"    pm.expect(jsonData.tests).to.have.property(\"include\");",
											"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
											"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"types\");",
											"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"user_agent\");",
											"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"timeouts\");",
											"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
											"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
											"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
											"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
											"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"browser\");",
											"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
											"    pm.expect(jsonData.browser).to.have.property(\"name\");",
											"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
											"    pm.expect(jsonData.browser).to.have.property(\"version\");",
											"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
											"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"webhook_urls\");",
											"    pm.expect(jsonData.webhook_urls).to.be.an.instanceof(Array);",
											"});",
											"",
											"var includedTests = JSON.parse(pm.globals.get(\"included_tests\"));",
											"var excludedTests = JSON.parse(pm.globals.get(\"excluded_tests\"));",
											"var automaticTimeout = pm.globals.get(\"automatic_timeout\");",
											"var manualTimeout = pm.globals.get(\"manual_timeout\");",
											"var specialTimeout = pm.globals.get(\"special_timeout\");",
											"var specialTimeoutTest = pm.globals.get(\"special_timeout_test\");",
											"",
											"pm.test(\"Configuration is as specified\", function () {",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"    for (var test of includedTests) {",
											"        pm.expect(jsonData.tests.include).to.include(test);",
											"    }",
											"    for (var test of excludedTests) {",
											"        pm.expect(jsonData.tests.exclude).to.include(test);",
											"    }",
											"    pm.expect(jsonData.types).to.include(\"automatic\");",
											"    pm.expect(jsonData.types).to.not.include(\"manual\");",
											"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
											"    pm.expect(jsonData.timeouts.automatic).to.equal(automaticTimeout);",
											"    pm.expect(jsonData.timeouts.manual).to.equal(manualTimeout);",
											"    pm.expect(jsonData.timeouts[specialTimeoutTest]).to.equal(specialTimeout);",
											"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
											"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
											"    pm.expect(jsonData.is_public).to.equal(false);",
											"    pm.expect(jsonData.reference_tokens).to.be.empty;",
											"    pm.expect(jsonData.webhook_urls).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5558f110-c1eb-46b0-8730-0ed580416666",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"pm.test(\"All tests are pending tests\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.not.have.lengthOf(0);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
											"})",
											"",
											"const availableTests = pm.globals.get(\"available_tests\");",
											"const includedTests = pm.globals.get(\"included_tests\");",
											"const excludedTests = pm.globals.get(\"excluded_tests\");",
											"",
											"pm.test(\"Selected subset of tests are part of the session\", function () {",
											"    for (var api of Object.keys(jsonData.pending_tests)) {",
											"        for (var includedTest of includedTests) {",
											"            if (includedTest.split(\"/\").find(part => !!part) === api) {",
											"                var includeRegExp = new RegExp(\"^\" + includedTest, \"i\");",
											"                for (var test of jsonData.pending_tests[api]) {",
											"                    pm.expect(test).to.match(regex);",
											"                }",
											"                break;",
											"            }",
											"        }",
											"        for (var excludedTest of excludedTests) {",
											"            if (excludedTest.split(\"/\").find(part => !!part) === api) {",
											"                var excludeRegExp = new RegExp(\"^\" + excludedTest, \"i\");",
											"                for (var test of jsonData.pending_tests[api]) {",
											"                    pm.expect(test).to.not.match(regex);",
											"                }",
											"                break;",
											"            }",
											"        }",
											"    }",
											"});",
											"",
											"const sessionTests = jsonData.pending_tests;",
											"",
											"pm.globals.set(\"session_tests\", JSON.stringify(sessionTests));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aef69109-daf0-4c50-87c1-ff68498a2ec2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"labels\");",
											"    pm.expect(jsonData.labels).to.be.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData.date_started).to.satisfy(value => !value || typeof value === \"number\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"    pm.expect(jsonData.date_finished).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"pm.test(\"Session status is pending\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"pending\");",
											"})",
											"",
											"pm.test(\"Start and Finish date not set\", function () {",
											"    pm.expect(jsonData.date_started).to.be.null;",
											"    pm.expect(jsonData.date_finished).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4de2ffb4-47f0-4b72-a92b-ff22b2624005",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8b8daf16-4137-4d2a-8e48-d32e7cd4e79e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update Session Labels",
			"item": [
				{
					"name": "Create Session \\w Configuration Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
									"",
									"pm.test(\"Responds with token in JSON format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData.token).to.match(tokenRegex);",
									"});",
									"",
									"",
									"const response = pm.response.json();",
									"const token = response.token;",
									"pm.globals.set(\"session_token\", token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6e5b17e0-0c3b-48ed-835d-906bee5dad19",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"labels\": [\"label1\", \"label2\"]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6b545d7-6252-4609-b873-73be94532d87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
									"",
									"pm.test(\"JSON structure is as expected\", function () {",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"tests\");",
									"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
									"    pm.expect(jsonData.tests).to.have.property(\"include\");",
									"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
									"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"types\");",
									"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"user_agent\");",
									"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"timeouts\");",
									"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
									"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
									"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
									"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
									"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"browser\");",
									"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
									"    pm.expect(jsonData.browser).to.have.property(\"name\");",
									"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
									"    pm.expect(jsonData.browser).to.have.property(\"version\");",
									"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
									"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"webhook_urls\");",
									"    pm.expect(jsonData.webhook_urls).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"labels\");",
									"    pm.expect(jsonData.labels).to.be.an.instanceof(Array);",
									"});",
									"",
									"pm.test(\"Configuration is default\", function () {",
									"    pm.expect(jsonData.token).to.match(tokenRegex);",
									"    pm.expect(jsonData.tests.include).to.include(\"/\");",
									"    pm.expect(jsonData.types).to.include(\"automatic\");",
									"    pm.expect(jsonData.types).to.include(\"manual\");",
									"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
									"    pm.expect(jsonData.timeouts.automatic).to.equal(60000);",
									"    pm.expect(jsonData.timeouts.manual).to.equal(300000);",
									"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
									"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
									"    pm.expect(jsonData.is_public).to.equal(false);",
									"    pm.expect(jsonData.reference_tokens).to.be.empty;",
									"    pm.expect(jsonData.webhook_urls).to.be.empty;",
									"    pm.expect(jsonData.labels).to.include(\"label1\");",
									"    pm.expect(jsonData.labels).to.include(\"label2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Labels Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58198160-2de3-4818-8c97-9ae38e62ae5f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"labels\": [\"new\", \"labels\"]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/labels",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}",
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6b545d7-6252-4609-b873-73be94532d87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
									"",
									"pm.test(\"JSON structure is as expected\", function () {",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"tests\");",
									"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
									"    pm.expect(jsonData.tests).to.have.property(\"include\");",
									"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
									"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"types\");",
									"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"user_agent\");",
									"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"timeouts\");",
									"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
									"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
									"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
									"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
									"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"browser\");",
									"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
									"    pm.expect(jsonData.browser).to.have.property(\"name\");",
									"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
									"    pm.expect(jsonData.browser).to.have.property(\"version\");",
									"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
									"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"webhook_urls\");",
									"    pm.expect(jsonData.webhook_urls).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"labels\");",
									"    pm.expect(jsonData.labels).to.be.an.instanceof(Array);",
									"});",
									"",
									"pm.test(\"Configuration is default\", function () {",
									"    pm.expect(jsonData.token).to.match(tokenRegex);",
									"    pm.expect(jsonData.tests.include).to.include(\"/\");",
									"    pm.expect(jsonData.types).to.include(\"automatic\");",
									"    pm.expect(jsonData.types).to.include(\"manual\");",
									"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
									"    pm.expect(jsonData.timeouts.automatic).to.equal(60000);",
									"    pm.expect(jsonData.timeouts.manual).to.equal(300000);",
									"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
									"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
									"    pm.expect(jsonData.is_public).to.equal(false);",
									"    pm.expect(jsonData.reference_tokens).to.be.empty;",
									"    pm.expect(jsonData.webhook_urls).to.be.empty;",
									"    pm.expect(jsonData.labels).to.include(\"new\");",
									"    pm.expect(jsonData.labels).to.include(\"labels\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean Up",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete Session",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "681c286c-d687-4bed-932e-fd6971f8db85",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9630bb3-72a0-41e9-a079-262e0e84c6d4",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create and Read Results",
			"item": [
				{
					"name": "Create Session",
					"item": [
						{
							"name": "Create Session Two Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e886f98-b49b-42bf-a60e-8621ff3ce71c",
										"exec": [
											"const availableTests = pm.globals.get(\"available_tests\");",
											"const test1 = availableTests[Object.keys(availableTests)[0]][0];",
											"const test2 = availableTests[Object.keys(availableTests)[1]][0];",
											"",
											"pm.globals.set(\"single_test_1\", test1);",
											"pm.globals.set(\"single_test_2\", test2);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tests\": {\n        \"include\": [\"{{single_test_1}}\", \"{{single_test_2}}\"]\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd9e7c88-0a43-4eac-9822-1bdc00de11ad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Responds with no results\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(typeof jsonData).to.equal(\"object\");",
											"    pm.expect(Object.keys(jsonData)).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}?",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}"
									],
									"query": [
										{
											"key": "path",
											"value": "/2dcontext/drawing-images-to-the-canvas",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements/2d.missingargs.html",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results Compact",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e68fdd4-f02e-473d-9a0a-9965bbced58a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var singleTest1 = pm.globals.get(\"single_test_1\");",
											"var singleTest2 = pm.globals.get(\"single_test_2\");",
											"",
											"var api1 = singleTest1.split(\"/\").find(part => !!part);",
											"var api2 = singleTest2.split(\"/\").find(part => !!part);",
											"",
											"pm.test(\"Responds with no results\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(typeof jsonData).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(api1);",
											"    pm.expect(jsonData).to.have.property(api2);",
											"    pm.expect(jsonData[api1].complete).to.equal(0);",
											"    pm.expect(jsonData[api2].complete).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}/compact",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}",
										"compact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Last Completed Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"pm.test(\"JSON format is as expected\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(3);",
											"    pm.expect(jsonData).to.have.property(\"pass\");",
											"    pm.expect(jsonData).to.have.property(\"fail\");",
											"    pm.expect(jsonData).to.have.property(\"timeout\");",
											"    for (var key of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[key]).to.be.an.instanceof(Array);",
											"    }",
											"});",
											"",
											"pm.test(\"Responds with no last completed tests\", function () {",
											"    for (var key of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[key]).to.be.empty;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/last_completed",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}",
										"last_completed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14459294-0ebd-4246-ae9d-ec1a5eb3676a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"const sessionTests = jsonData.pending_tests;",
											"",
											"pm.globals.set(\"session_tests\", JSON.stringify(sessionTests));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create First Result",
					"item": [
						{
							"name": "Read Next Test of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(Object.keys(response)).to.have.lengthOf(1);",
											"    pm.expect(response).to.have.property(\"next_test\");",
											"    pm.expect(typeof response.next_test).to.equal(\"string\");",
											"});",
											"",
											"const nextTest = response.next_test;",
											"pm.globals.set(\"current_test_url\", nextTest);",
											"if (!nextTest) return;",
											"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
											"pm.globals.set(\"current_test\", test);",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"",
											"pm.test(\"Returned test is first of two specified tests\", function () {",
											"    pm.expect(test).to.equal(test1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}",
										"next"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14459294-0ebd-4246-ae9d-ec1a5eb3676a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"One test is pending, one test is running\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.have.lengthOf(1);",
											"    var api = Object.keys(jsonData.pending_tests)[0];",
											"    pm.expect(jsonData.pending_tests[api]).to.have.lengthOf(1);",
											"    pm.expect(jsonData.pending_tests[api]).to.include(test2);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(1);",
											"    api = Object.keys(jsonData.running_tests)[0];",
											"    pm.expect(jsonData.running_tests[api]).to.have.lengthOf(1);",
											"    pm.expect(jsonData.running_tests[api]).to.include(test1);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91dd9303-8cae-4aa7-ab22-a1892270e313",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"FAIL\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14459294-0ebd-4246-ae9d-ec1a5eb3676a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"One test is pending, one test is completed\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.have.lengthOf(1);",
											"    var api = Object.keys(jsonData.pending_tests)[0];",
											"    pm.expect(jsonData.pending_tests[api]).to.have.lengthOf(1);",
											"    pm.expect(jsonData.pending_tests[api]).to.include(test2);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1dc6977-22f8-4ba5-8b87-8f81ebeba6d3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"labels\");",
											"    pm.expect(jsonData.labels).to.be.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData.date_started).to.satisfy(value => !value || typeof value === \"number\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"    pm.expect(jsonData.date_finished).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"pm.test(\"Session status is running\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"running\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Last Completed Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"pm.test(\"JSON format is as expected\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(3);",
											"    pm.expect(jsonData).to.have.property(\"pass\");",
											"    pm.expect(jsonData).to.have.property(\"fail\");",
											"    pm.expect(jsonData).to.have.property(\"timeout\");",
											"    for (var key of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[key]).to.be.an.instanceof(Array);",
											"    }",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"",
											"pm.test(\"Responds with one last completed tests as failed\", function () {",
											"    pm.expect(jsonData[\"pass\"]).to.be.empty;",
											"    pm.expect(jsonData[\"fail\"]).to.have.lengthOf(1);",
											"    pm.expect(jsonData[\"fail\"][0]).to.equal(test1);",
											"    pm.expect(jsonData[\"timeout\"]).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/last_completed",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}",
										"last_completed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf5c6f6d-4746-418a-83b1-81e1cdf58fa9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON format is as expected\", function () {",
											"    for (var api of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[api]).to.be.an.instanceof(Array);",
											"        for (var result of jsonData[api]) {",
											"            pm.expect(typeof result).to.equal(\"object\");",
											"            pm.expect(Object.keys(result)).to.have.lengthOf(4);",
											"            pm.expect(result).to.have.property(\"test\");",
											"            pm.expect(typeof result.test).to.equal(\"string\");",
											"            pm.expect(result).to.have.property(\"status\");",
											"            pm.expect(typeof result.status).to.equal(\"string\");",
											"            pm.expect(result).to.have.property(\"message\");",
											"            pm.expect(result.message).to.satisfy(message => !message || typeof message === \"string\");",
											"            pm.expect(result).to.have.property(\"subtests\");",
											"            pm.expect(result.subtests).to.be.an.instanceof(Array);",
											"            for (var subtest of result.subtests) {",
											"                pm.expect(typeof subtest).to.equal(\"object\");",
											"                pm.expect(Object.keys(subtest)).to.have.lengthOf(3);",
											"                pm.expect(subtest).to.have.property(\"name\");",
											"                pm.expect(typeof subtest.name).to.equal(\"string\");",
											"                pm.expect(subtest).to.have.property(\"status\");",
											"                pm.expect(typeof subtest.status).to.equal(\"string\");",
											"                pm.expect(subtest).to.have.property(\"message\");",
											"                pm.expect(subtest.message).to.satisfy(message => !message || typeof message === \"string\");",
											"            }",
											"        }",
											"    }",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"",
											"pm.test(\"Test is first test, successful run and failed\", function () {",
											"    var api = Object.keys(jsonData)[0];",
											"    pm.expect(api).to.equal(test1.split(\"/\").find(part => !!part))",
											"    var result = jsonData[api][0];",
											"    pm.expect(result.test).to.equal(test1);",
											"    pm.expect(result.status).to.equal(\"OK\");",
											"    pm.expect(result.message).to.be.null;",
											"    var subtest = result.subtests[0];",
											"    pm.expect(subtest.status).to.equal(\"FAIL\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}?",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}"
									],
									"query": [
										{
											"key": "path",
											"value": "/2dcontext/drawing-images-to-the-canvas",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements/2d.missingargs.html",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results Compact",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72e29e4c-1d7b-4529-a7a4-bd321fde35c5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(typeof jsonData).to.equal(\"object\");",
											"    for (var api of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[api]).to.have.property(\"pass\");",
											"        pm.expect(typeof jsonData[api].pass).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"fail\");",
											"        pm.expect(typeof jsonData[api].fail).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"timeout\");",
											"        pm.expect(typeof jsonData[api].timeout).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"not_run\");",
											"        pm.expect(typeof jsonData[api].not_run).to.equal(\"number\");",
											"    }",
											"})",
											"",
											"pm.test(\"Responds with one test failed\", function () {",
											"    var api = Object.keys(jsonData)[0];",
											"    pm.expect(jsonData[api].pass).to.equal(0);",
											"    pm.expect(jsonData[api].fail).to.equal(1);",
											"    pm.expect(jsonData[api].timeout).to.equal(0);",
											"    pm.expect(jsonData[api].not_run).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}/compact",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}",
										"compact"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Last Result",
					"item": [
						{
							"name": "Read Next Test of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(Object.keys(response)).to.have.lengthOf(1);",
											"    pm.expect(response).to.have.property(\"next_test\");",
											"    pm.expect(typeof response.next_test).to.equal(\"string\");",
											"});",
											"",
											"const nextTest = response.next_test;",
											"pm.globals.set(\"current_test_url\", nextTest);",
											"if (!nextTest) return;",
											"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
											"pm.globals.set(\"current_test\", test);",
											"",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"Returned test is second of two specified tests\", function () {",
											"    pm.expect(test).to.equal(test2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}",
										"next"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14459294-0ebd-4246-ae9d-ec1a5eb3676a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"One test is running\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.have.lengthOf(0);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(1);",
											"    var api = Object.keys(jsonData.running_tests)[0];",
											"    pm.expect(jsonData.running_tests[api]).to.have.lengthOf(1);",
											"    pm.expect(jsonData.running_tests[api]).to.include(test2);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91dd9303-8cae-4aa7-ab22-a1892270e313",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"PASS\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07ca7361-9ebd-4010-a617-bdce1527ac2f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"labels\");",
											"    pm.expect(jsonData.labels).to.be.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData.date_started).to.satisfy(value => !value || typeof value === \"number\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"    pm.expect(jsonData.date_finished).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"pm.test(\"Session status is completed\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"completed\");",
											"})",
											"",
											"pm.test(\"Finish date is set\", function () {",
											"    pm.expect(jsonData.date_finished).to.be.below(Date.now());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ad7031e-a1f9-463f-82fb-e817d0cb8c42",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"var test1Api = test1.split(\"/\").find(part => !!part);",
											"var test2Api = test1.split(\"/\").find(part => !!part);",
											"",
											"pm.test(\"One test is pending, one test is completed\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.have.lengthOf(0);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Last Completed Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"pm.test(\"JSON format is as expected\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(3);",
											"    pm.expect(jsonData).to.have.property(\"pass\");",
											"    pm.expect(jsonData).to.have.property(\"fail\");",
											"    pm.expect(jsonData).to.have.property(\"timeout\");",
											"    for (var key of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[key]).to.be.an.instanceof(Array);",
											"    }",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"Responds with one last completed tests as failed and one last completed test as passed\", function () {",
											"    pm.expect(jsonData[\"pass\"]).to.have.lengthOf(1);",
											"    pm.expect(jsonData[\"pass\"][0]).to.equal(test2);",
											"    pm.expect(jsonData[\"fail\"]).to.have.lengthOf(1);",
											"    pm.expect(jsonData[\"fail\"][0]).to.equal(test1);",
											"    pm.expect(jsonData[\"timeout\"]).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/last_completed",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}",
										"last_completed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e949620-1c59-4370-b8d9-cf313ff1c71d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON format is as expected\", function () {",
											"    for (var api of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[api]).to.be.an.instanceof(Array);",
											"        for (var result of jsonData[api]) {",
											"            pm.expect(typeof result).to.equal(\"object\");",
											"            pm.expect(Object.keys(result)).to.have.lengthOf(4);",
											"            pm.expect(result).to.have.property(\"test\");",
											"            pm.expect(typeof result.test).to.equal(\"string\");",
											"            pm.expect(result).to.have.property(\"status\");",
											"            pm.expect(typeof result.status).to.equal(\"string\");",
											"            pm.expect(result).to.have.property(\"message\");",
											"            pm.expect(result.message).to.satisfy(message => !message || typeof message === \"string\");",
											"            pm.expect(result).to.have.property(\"subtests\");",
											"            pm.expect(result.subtests).to.be.an.instanceof(Array);",
											"            for (var subtest of result.subtests) {",
											"                pm.expect(typeof subtest).to.equal(\"object\");",
											"                pm.expect(Object.keys(subtest)).to.have.lengthOf(3);",
											"                pm.expect(subtest).to.have.property(\"name\");",
											"                pm.expect(typeof subtest.name).to.equal(\"string\");",
											"                pm.expect(subtest).to.have.property(\"status\");",
											"                pm.expect(typeof subtest.status).to.equal(\"string\");",
											"                pm.expect(subtest).to.have.property(\"message\");",
											"                pm.expect(subtest.message).to.satisfy(message => !message || typeof message === \"string\");",
											"            }",
											"        }",
											"    }",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"Test is first and second test, successful run and failed, and successful run and passed\", function () {",
											"    var api = Object.keys(jsonData)[0];",
											"    for (var result of jsonData[api]) {",
											"        if (result.test === test1) {",
											"            pm.expect(result.test).to.equal(test1); ",
											"            pm.expect(result.status).to.equal(\"OK\");",
											"            pm.expect(result.message).to.be.null;",
											"            var subtest = result.subtests[0];",
											"            pm.expect(subtest.status).to.equal(\"FAIL\");",
											"        } else {",
											"            pm.expect(result.test).to.equal(test2); ",
											"            pm.expect(result.status).to.equal(\"OK\");",
											"            pm.expect(result.message).to.be.null;",
											"            subtest = result.subtests[0];",
											"            pm.expect(subtest.status).to.equal(\"PASS\");",
											"        }",
											"    }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}?",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}"
									],
									"query": [
										{
											"key": "path",
											"value": "/2dcontext/drawing-images-to-the-canvas",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements/2d.missingargs.html",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results Compact",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cb2e4af-3125-4c78-92e1-9ef2a6703554",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(typeof jsonData).to.equal(\"object\");",
											"    for (var api of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[api]).to.have.property(\"pass\");",
											"        pm.expect(typeof jsonData[api].pass).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"fail\");",
											"        pm.expect(typeof jsonData[api].fail).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"timeout\");",
											"        pm.expect(typeof jsonData[api].timeout).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"not_run\");",
											"        pm.expect(typeof jsonData[api].not_run).to.equal(\"number\");",
											"    }",
											"})",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"var test1Api = test1.split(\"/\").find(part => !!part);",
											"var test2Api = test1.split(\"/\").find(part => !!part);",
											"",
											"pm.test(\"Responds with one test failed\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
											"    var api = Object.keys(jsonData)[0];",
											"    if (api === test1Api) {",
											"        pm.expect(jsonData[api].pass).to.equal(0);",
											"        pm.expect(jsonData[api].fail).to.equal(1);",
											"    } else {",
											"        pm.expect(jsonData[api].pass).to.equal(1);",
											"        pm.expect(jsonData[api].fail).to.equal(0);",
											"    }",
											"    pm.expect(jsonData[api].timeout).to.equal(0);",
											"    pm.expect(jsonData[api].not_run).to.equal(0);",
											"    api = Object.keys(jsonData)[1];",
											"    if (api === test1Api) {",
											"        pm.expect(jsonData[api].pass).to.equal(0);",
											"        pm.expect(jsonData[api].fail).to.equal(1);",
											"    } else {",
											"        pm.expect(jsonData[api].pass).to.equal(1);",
											"        pm.expect(jsonData[api].fail).to.equal(0);",
											"    }",
											"    pm.expect(jsonData[api].timeout).to.equal(0);",
											"    pm.expect(jsonData[api].not_run).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}/compact",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}",
										"compact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Next Test of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(Object.keys(response)).to.have.lengthOf(1);",
											"    pm.expect(response).to.have.property(\"next_test\");",
											"    pm.expect(typeof response.next_test).to.equal(\"string\");",
											"});",
											"",
											"const nextTest = response.next_test;",
											"pm.globals.set(\"current_test_url\", nextTest);",
											"if (!nextTest) return;",
											"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
											"pm.globals.set(\"current_test\", test);",
											"",
											"pm.test(\"Returned test finish page\", function () {",
											"    pm.expect(test).to.equal(\"/wave/finish.html\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"tests",
										"{{session_token}}",
										"next"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean Up",
					"item": [
						{
							"name": "Delete Session",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Viewing and Downloading Reports",
			"item": [
				{
					"name": "Create Sessions",
					"item": [
						{
							"name": "First Session",
							"item": [
								{
									"name": "Create Session One Tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const response = pm.response.json();",
													"const token = response.token;",
													"pm.globals.set(\"session_token\", token);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9e886f98-b49b-42bf-a60e-8621ff3ce71c",
												"exec": [
													"const availableTests = pm.globals.get(\"available_tests\");",
													"const test1 = availableTests[Object.keys(availableTests)[0]][0];",
													"const test2 = availableTests[Object.keys(availableTests)[0]][1];",
													"const apiName = test1.split(\"/\").filter(part => !!part)[0];",
													"",
													"pm.globals.set(\"single_test_1\", test1);",
													"pm.globals.set(\"single_test_2\", test2);",
													"pm.globals.set(\"api_name\", apiName);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tests\": {\n        \"include\": [\"{{single_test_1}}\"]\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"wave",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Start Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token}}/start",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"wave",
												"api",
												"sessions",
												"{{session_token}}",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Next Test of Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const response = pm.response.json();",
													"",
													"const nextTest = response.next_test;",
													"pm.globals.set(\"current_test_url\", nextTest);",
													"if (!nextTest) return;",
													"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
													"pm.globals.set(\"current_test\", test);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/next",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"wave",
												"api",
												"tests",
												"{{session_token}}",
												"next"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91dd9303-8cae-4aa7-ab22-a1892270e313",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"FAIL\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"wave",
												"api",
												"results",
												"{{session_token}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Second Session",
							"item": [
								{
									"name": "Create Session One Tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const response = pm.response.json();",
													"const token = response.token;",
													"pm.globals.set(\"session_token_comp\", token);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9e886f98-b49b-42bf-a60e-8621ff3ce71c",
												"exec": [
													"const availableTests = pm.globals.get(\"available_tests\");",
													"const test1 = availableTests[Object.keys(availableTests)[0]][0];",
													"const test2 = availableTests[Object.keys(availableTests)[0]][1];",
													"",
													"pm.globals.set(\"single_test_1\", test1);",
													"pm.globals.set(\"single_test_2\", test2);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tests\": {\n        \"include\": [\"{{single_test_1}}\"]\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"wave",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Start Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ebc9934-0b47-4b0b-9796-43ba8f1518dc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions/{{session_token_comp}}/start",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"wave",
												"api",
												"sessions",
												"{{session_token_comp}}",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Next Test of Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b39fe619-0b3e-4db5-9fdc-f94503326471",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const response = pm.response.json();",
													"",
													"const nextTest = response.next_test;",
													"pm.globals.set(\"current_test_url\", nextTest);",
													"if (!nextTest) return;",
													"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
													"pm.globals.set(\"current_test\", test);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token_comp}}/next",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"wave",
												"api",
												"tests",
												"{{session_token_comp}}",
												"next"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91dd9303-8cae-4aa7-ab22-a1892270e313",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"FAIL\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token_comp}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"wave",
												"api",
												"results",
												"{{session_token_comp}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Download reports",
					"item": [
						{
							"name": "Download Results Overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "077c4b9f-f6f0-4462-8c2e-ff1a0e2da0a0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}/overview",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}",
										"overview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download All Apis Json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d21e4ab0-2d92-4941-8cee-1c94dbb8086c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}/json",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}",
										"json"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download WPT Multi Report Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d21e4ab0-2d92-4941-8cee-1c94dbb8086c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Uri returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(typeof jsonData.uri).to.equal(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{api_name}}/reporturl?tokens={{session_token}},{{session_token_comp}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{api_name}}",
										"reporturl"
									],
									"query": [
										{
											"key": "tokens",
											"value": "{{session_token}},{{session_token_comp}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Results Api Json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d21e4ab0-2d92-4941-8cee-1c94dbb8086c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f0021ba-d8ed-4869-befe-c9d58be170f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}/{{api_name}}/json",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}",
										"{{api_name}}",
										"json"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download WPT Report Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d21e4ab0-2d92-4941-8cee-1c94dbb8086c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Uri returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(typeof jsonData.uri).to.equal(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f0021ba-d8ed-4869-befe-c9d58be170f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/results/{{session_token}}/{{api_name}}/reporturl",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"wave",
										"api",
										"results",
										"{{session_token}}",
										"{{api_name}}",
										"reporturl"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Malfunctioning List",
			"item": [
				{
					"name": "Create Session \\w Configuration Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d3b6823-a70c-4dda-8424-4cacdedf2c8c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
									"",
									"pm.test(\"Responds with token in JSON format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData.token).to.match(tokenRegex);",
									"});",
									"",
									"",
									"const response = pm.response.json();",
									"const token = response.token;",
									"pm.globals.set(\"session_token\", token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6e5b17e0-0c3b-48ed-835d-906bee5dad19",
								"exec": [
									"var automaticTimeout = 120000;",
									"var manualTimeout = 1000000;",
									"var specialTimeout = 2000;",
									"",
									"pm.globals.set(\"automatic_timeout\", automaticTimeout);",
									"pm.globals.set(\"manual_timeout\", manualTimeout);",
									"pm.globals.set(\"special_timeout\", specialTimeout);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tests\": {\n        \"include\": {{included_tests}},\n        \"exclude\": {{excluded_tests}}\n    },\n    \"types\": [\n        \"automatic\"\n    ],\n    \"timeouts\": {\n        \"automatic\": {{automatic_timeout}},\n        \"manual\": {{manual_timeout}},\n        \"{{special_timeout_test}}\": {{special_timeout}}\n    },\n    \"labels\": [\"label1\", \"label2\"]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/sessions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Malfunctioning Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6b545d7-6252-4609-b873-73be94532d87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Return empty array\", function() {",
									"    pm.expect(jsonData).to.be.an.instanceof(Array)",
									"    pm.expect(jsonData).to.have.length(0)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/malfunctioning",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"malfunctioning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Session Malfunctioning Insert Two",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6b545d7-6252-4609-b873-73be94532d87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t\"/test/file/one.html\",\n\t\"/test/file/two.html\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/malfunctioning",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"malfunctioning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Malfunctioning Two Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6b545d7-6252-4609-b873-73be94532d87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Return array with two tests\", function() {",
									"    pm.expect(jsonData).to.be.an.instanceof(Array)",
									"    pm.expect(jsonData).to.have.length(2)",
									"    pm.expect(jsonData).to.include(\"/test/file/one.html\")",
									"    pm.expect(jsonData).to.include(\"/test/file/two.html\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/malfunctioning",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"malfunctioning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Session Malfunctioning Empty Array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6b545d7-6252-4609-b873-73be94532d87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/malfunctioning",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"malfunctioning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Malfunctioning Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6b545d7-6252-4609-b873-73be94532d87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Return empty array\", function() {",
									"    pm.expect(jsonData).to.be.an.instanceof(Array)",
									"    pm.expect(jsonData).to.have.length(0)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/wave/api/tests/{{session_token}}/malfunctioning",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"wave",
								"api",
								"tests",
								"{{session_token}}",
								"malfunctioning"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}